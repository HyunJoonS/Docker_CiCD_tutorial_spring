name: CI/CD

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: my-repository:spring-dev # 올리고자 하는 저장소:태그 로 바꿔줄것
      CONTAINER_NAME: spring-container # 컨테이너 이름 설정
      CONTAINER_PORT: 8080 # 보통 리액트 3000, 스프링 8080을 사용
      SSH_USER_NAME: ubuntu #ssh 접속용 username 설정

    steps:
      - uses: actions/checkout@v3

      - name: Docker Login
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v4.1.1
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}

      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: ${{ env.SSH_USER_NAME }}
          key: ${{ secrets.PRIVATE_KEY }} # pem key
          script: |
            # Docker 이미지 풀
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
            
            # 컨테이너 중지 및 제거 (컨테이너가 없으면 무시됨)
            sudo docker stop ${{ env.CONTAINER_NAME }} || true
            sudo docker rm ${{ env.CONTAINER_NAME }} || true
            
            # 새로운 컨테이너 실행
            sudo docker run -d -p ${{ env.CONTAINER_PORT }}:${{env.CONTAINER_PORT}} --name ${{ env.CONTAINER_NAME }} ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}
            
            # 사용하지 않는 이미지 제거
            sudo docker image prune -a -f
